"use client"; import React,{ReactNode, useEffect}from "react"; import "epsilon-ui/dist/epsilon.css"; const TextBox: = ({className = "", parallax = false, tiltFactor = 20, placeholder = "Type here...", value = "", id, name, autoComplete = "off", autoFocus = false, disabled = false, readOnly = false, required = false, onChange, onFocus, type = "default", variant = "primary",}) =>{const textBoxRef = React.useRef(null); const isTouchDevice = () =>{if (typeof window !== "undefined"){return "ontouchstart" in window || navigator.maxTouchPoints > 0;}return false;}; if (isTouchDevice()){tiltFactor = 0;}let inBuiltClass = "px-3 py-1.5 rounded-(--s2) text-(length:--s3) text-(--background) bg-(--foreground) font-medium overflow-hidden outline-(--foreground)/50 outline-0 delay-25 transition-[outline] transition-[background] hover:bg-(--foreground)/90 focus:outline-3"; switch (variant){case "secondary"= "px-3 py-1.5 rounded-(--s2) text-(length:--s3) text-(--foreground) bg-(--foreground)/10 font-medium overflow-hidden outline-(--foreground)/5 outline-0 delay-25 transition-[outline] transition-[background] hover:bg-(--foreground)/9 focus:outline-3"; break; case "outline"= "px-3 py-1.5 rounded-(--s2) text-(length:--s3) text-(--foreground) border border-(--foreground)/20 bg-(--foreground)/10 font-medium overflow-hidden outline-(--foreground)/7 outline-0 delay-25 transition-[outline] transition-[background] hover:bg-(--foreground)/9 focus:outline-3"; break; break; case "fancy"= "px-3 py-1.5 rounded-(--s2) text-(length:--s3) text-(--foreground) border border-(--foreground)/20 bg-linear-to-b from-(--foreground)/10 to-(--foreground)/6 font-medium overflow-hidden outline-(--foreground)/7 outline-0 delay-25 transition-[outline] transition-[background] hover:bg-(--foreground)/2 focus:outline-3"; break;}useEffect(() =>{const textBox = textBoxRef.current; let handleMouseMove = (e) =>{}, handleMouseLeave = () =>{}; if (!textBox) return; if (parallax){handleMouseMove = (e) =>{const rect = textBox.getBoundingClientRect(); const x = e.clientX - rect.left; const y = e.clientY - rect.top; const centerX = rect.width / 2; const centerY = rect.height / 2; const tiltX = (y - centerY) / (textBox.clientHeight / tiltFactor); const tiltY = (centerX - x) / (textBox.clientWidth / tiltFactor); textBox.style.setProperty("--x", `${x}%`); textBox.style.setProperty("--y", `${y}%`); textBox.style.transform = `perspective(1000px) rotateX(${tiltX}deg) rotateY(${tiltY}deg)`;}; handleMouseLeave = () =>{textBox.style.transform = "perspective(1000px) rotateX(0deg) rotateY(0deg)";}; textBox.addEventListener("mousemove", handleMouseMove); textBox.addEventListener("mouseleave", handleMouseLeave);}textBox.value = value; return () =>{textBox.removeEventListener("mousemove", handleMouseMove); textBox.removeEventListener("mouseleave", handleMouseLeave);};}); return ( );}; export default TextBox; 