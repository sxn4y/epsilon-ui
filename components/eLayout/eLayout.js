"use client"; import React,{ReactNode, useEffect}from "react"; import gsap from "gsap"; import ScrollTrigger from "gsap/ScrollTrigger"; import "epsilon-ui/dist/epsilon.css"; gsap.registerPlugin(ScrollTrigger); interface LayoutProps{children?: ReactNode; className?: string; reveal?: boolean; duration?: number; delay?: number; once?: boolean; opacity?: number; scale?: number; angle?: number; threshold?: number; distance?: number; reverse?: boolean; ease?: string; direction?: "hor" | "ver"; stagger?: number; staggerFrom?: "start" | "end" | "center";}interface SidebarProps{children?: ReactNode; className?: string; side?: "left" | "right";}const ELayout: = ({children, className = "", reveal = false, duration = 0.8, delay = 0, once = true, opacity = 0, scale = 1, angle = 0, threshold = 0.1, distance = 100, reverse = false, ease = "power3.out", direction = "ver", stagger = 0, staggerFrom = "start",}) =>{const axis = direction === "hor" ? "x" : "y"; const offset = reverse ? -distance : distance; const rotation = reverse ? -angle : angle; const percent = (1 - threshold) * 100; useEffect(() =>{if (reveal){const el = document.querySelectorAll(".epsilon-layout .epsilon-sublayout"); if (!el) return; let tl = once ? gsap.timeline({scrollTrigger:{trigger, start: `top ${percent}%`, end: `bottom +=50px`,},}) : gsap.timeline({scrollTrigger:{trigger, start: `top ${percent}%`, end: `bottom +=50px`, onEnter: () =>{tl.restart();}, onLeave: () =>{tl.pause(0);}, onEnterBack: () =>{tl.restart();}, onLeaveBack: () =>{tl.pause(0);},},}); tl.set(el,{[axis], scale, opacity, rotate,}); tl.to(el,{[axis], scale, opacity, rotate, duration, ease, delay, stagger:{amount, from,},});}}); return ({children});}; const ESidebar: = ({children, className = "", side = "left",}) =>{return ({children});}; const EContentbar: = ({children, className}) =>{return ({children});}export{ELayout, ESidebar, EContentbar}; 